buildscript {
    repositories {
        maven { url "http://jars.interlis.ch" }
        maven { url "http://jars.umleditor.org" }
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://dl.bintray.com/sogis/iox-wkf" } // temporary
        mavenCentral()
    }
    dependencies {
        classpath group: 'ch.so.agi', name: 'gretl',  version: '2.1.+'
    }
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'deleteData', 'createAllData', 'importDataGpkg'

def todaysDate = new Date().format('yyyy-MM-dd')

def gemeinden = [2401,2403,2405,2407,2408,2421,2424,2455,2456,2457,2473,2474,2475,2476,2477,2479,2491,2492,2498,2501,2502,2514,2518,2541,2546,2548,2573,2574,2551,2580,2581,2582,2586,2613,2614,2615,2616,2617,2621,2622]
//def gemeinden = [2401,2403]

task deleteData(type: SqlExecutor) {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ['delete_data.sql']
}

gemeinden.each { gemeinde ->
    task "createBauzonengrenzen_$gemeinde"(type: SqlExecutor) {
        database = [dbUriPub, dbUserPub, dbPwdPub]
        sqlFiles = ['create_bauzonengrenzen.sql']
        sqlParameters = [bfsnr: gemeinde as String]

    }
}

task createAllData() {
    description = "Sql aggregation task."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('createBauzonengrenzen_') }
    }
}

task exportData(type: Ili2pgExport) {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = "arp_bauzonengrenzen_pub"
    models = "SO_ARP_Bauzonengrenzen_20210120"
    modeldir = "../model/;http://models.geo.admin.ch"
    disableValidation = true
    logFile = file("bauzonengrenzen_"+todaysDate+"_export.log")
    dataFile = file("bauzonengrenzen_"+todaysDate+".xtf")
}

task validateData(type: IliValidator, dependsOn: exportData) {
    dataFiles = ["bauzonengrenzen_"+todaysDate+".xtf"]
    models = "SO_ARP_Bauzonengrenzen_20210120"
    modeldir = "../model/;http://models.geo.admin.ch"
    logFile = file("bauzonengrenzen_"+todaysDate+"_validation.log")
    failOnError = false
}

task importDataGpkg(type: Ili2gpkgImport, dependsOn: 'validateData') {
    models = "SO_ARP_Bauzonengrenzen_20210120"
    modeldir = "../model/;http://models.geo.admin.ch"
    dataFile = file("bauzonengrenzen_"+todaysDate+".xtf")
    dbfile = file("bauzonengrenzen_"+todaysDate+".gpkg")
    disableValidation = true
}